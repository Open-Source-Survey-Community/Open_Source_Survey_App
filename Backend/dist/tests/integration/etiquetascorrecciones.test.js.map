{"version":3,"sources":["../../../tests/integration/etiquetascorrecciones.test.js"],"names":["tester","require","describe","self","test","url","contentType","it","done","JSON","stringify","query","variables","etiqueta","usuariopropietario","idioma","color","descripcion","then","expect","response","status","toBe","success","data","crearNuevaEtiquetaCorrecciones","toMatch"],"mappings":"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","file":"etiquetascorrecciones.test.js","sourcesContent":["/* eslint-disable quotes,no-undef */\n\nconst tester = require('graphql-tester').tester;\n\ndescribe(\"Modelo etiquetas de correcciones, aqui se describe la logica\" +\n\t\"de negocio para las preguntas y encuestas \", function (){\n\tconst self = this;\n\tself.test = tester({\n\t\turl: \"http://127.0.0.1:3660/graphtest\",\n\t\tcontentType: \"application/json\"\n\t});\n\tit(\"Deberia poder crear una nueva etiqueta de correccion \", function (done) {\n\t\tself\n\t\t\t.test(JSON.stringify({\n\t\t\t\tquery: `mutation crearNuevaEtiquetaCorrecciones($etiqueta: etiquetaCorreccionesInput!){\n\t\t\t\t\t\tcrearNuevaEtiquetaCorrecciones(etiqueta: $etiqueta){\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tetiqueta\t\t\n\t\t\t\t\t\t}\t\t\n\t\t\t\t}`,\n\t\t\t\tvariables: {\n\t\t\t\t\tetiqueta: {\n\t\t\t\t\t\tusuariopropietario: \"5ac248c98a3f74223f16895e\",\n\t\t\t\t\t\tidioma: \"en\",\n\t\t\t\t\t\tcolor: \"#FFFECA\",\n\t\t\t\t\t\tdescripcion: \"es una etiqueta de ejemplo\",\n\t\t\t\t\t\tetiqueta: \"pregunta muy extensa\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}))\n\t\t\t.then(response => {\n\t\t\t\texpect(response.status).toBe(200);\n\t\t\t\texpect(response.success).toBe(true);\n\t\t\t\texpect(response.data.crearNuevaEtiquetaCorrecciones.etiqueta).toMatch(/pregunta muy extensa/);\n\n\t\t\t\tdone();\n\n\t\t\t});\n\t});\n\tit(\"Deberia poder crear otra nueva etiqueta de correccion \", function (done) {\n\t\tself\n\t\t\t.test(JSON.stringify({\n\t\t\t\tquery: `mutation crearNuevaEtiquetaCorrecciones($etiqueta: etiquetaCorreccionesInput!){\n\t\t\t\t\t\tcrearNuevaEtiquetaCorrecciones(etiqueta: $etiqueta){\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tetiqueta\t\t\n\t\t\t\t\t\t}\t\t\n\t\t\t\t}`,\n\t\t\t\tvariables: {\n\t\t\t\t\tetiqueta: {\n\t\t\t\t\t\tusuariopropietario: \"5ac248c98a3f74223f16895e\",\n\t\t\t\t\t\tidioma: \"en\",\n\t\t\t\t\t\tcolor: \"#FFFECA\",\n\t\t\t\t\t\tdescripcion: \"es otra etiqueta de ejemplo\",\n\t\t\t\t\t\tetiqueta: \"pregunta repetida\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}))\n\t\t\t.then(response => {\n\t\t\t\texpect(response.status).toBe(200);\n\t\t\t\texpect(response.success).toBe(true);\n\t\t\t\texpect(response.data.crearNuevaEtiquetaCorrecciones.etiqueta).toMatch(/pregunta repetida/);\n\n\t\t\t\tdone();\n\n\t\t\t});\n\t});\n\tit(\"No Deberia poder crear otra nueva etiqueta de correccion, si ya existe en la base de datos \", function (done) {\n\t\tself\n\t\t\t.test(JSON.stringify({\n\t\t\t\tquery: `mutation crearNuevaEtiquetaCorrecciones($etiqueta: etiquetaCorreccionesInput!){\n\t\t\t\t\t\tcrearNuevaEtiquetaCorrecciones(etiqueta: $etiqueta){\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tetiqueta\t\t\n\t\t\t\t\t\t}\t\t\n\t\t\t\t}`,\n\t\t\t\tvariables: {\n\t\t\t\t\tetiqueta: {\n\t\t\t\t\t\tusuariopropietario: \"5ac248c98a3f74223f16895e\",\n\t\t\t\t\t\tidioma: \"en\",\n\t\t\t\t\t\tcolor: \"#FFFECA\",\n\t\t\t\t\t\tdescripcion: \"es otra etiqueta de ejemplo\",\n\t\t\t\t\t\tetiqueta: \"pregunta repetida\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}))\n\t\t\t.then(response => {\n\t\t\t\texpect(response.status).toBe(200);\n\t\t\t\texpect(response.success).toBe(false);\n\t\t\t\tdone();\n\n\t\t\t});\n\t});\n\tit(\"No Deberia poder crear otra nueva etiqueta de correccion, si ya existe en la base de datos aun si cambia \" +\n\t\t\"de MINUSCULA A MAYUSCULA  \", function (done) {\n\t\tself\n\t\t\t.test(JSON.stringify({\n\t\t\t\tquery: `mutation crearNuevaEtiquetaCorrecciones($etiqueta: etiquetaCorreccionesInput!){\n\t\t\t\t\t\tcrearNuevaEtiquetaCorrecciones(etiqueta: $etiqueta){\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tetiqueta\t\t\n\t\t\t\t\t\t}\t\t\n\t\t\t\t}`,\n\t\t\t\tvariables: {\n\t\t\t\t\tetiqueta: {\n\t\t\t\t\t\tusuariopropietario: \"5ac248c98a3f74223f16895e\",\n\t\t\t\t\t\tidioma: \"en\",\n\t\t\t\t\t\tcolor: \"#FFFECA\",\n\t\t\t\t\t\tdescripcion: \"es otra etiqueta de ejemplo\",\n\t\t\t\t\t\tetiqueta: \"Pregunta Repetida\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}))\n\t\t\t.then(response => {\n\t\t\t\texpect(response.status).toBe(200);\n\t\t\t\texpect(response.success).toBe(false);\n\t\t\t\tdone();\n\n\t\t\t});\n\t});\n\tit(\"Deberia poder crear otra nueva etiqueta de correccion, alternando \" +\n\t\t\"de MINUSCULA A MAYUSCULA  \", function (done) {\n\t\tself\n\t\t\t.test(JSON.stringify({\n\t\t\t\tquery: `mutation crearNuevaEtiquetaCorrecciones($etiqueta: etiquetaCorreccionesInput!){\n\t\t\t\t\t\tcrearNuevaEtiquetaCorrecciones(etiqueta: $etiqueta){\n\t\t\t\t\t\t\tcolor\n\t\t\t\t\t\t\tetiqueta\t\t\n\t\t\t\t\t\t}\t\t\n\t\t\t\t}`,\n\t\t\t\tvariables: {\n\t\t\t\t\tetiqueta: {\n\t\t\t\t\t\tusuariopropietario: \"5ac248c98a3f74223f16895e\",\n\t\t\t\t\t\tidioma: \"en\",\n\t\t\t\t\t\tcolor: \"#FFFECA\",\n\t\t\t\t\t\tdescripcion: \"es otra etiqueta de ejemplo\",\n\t\t\t\t\t\tetiqueta: \"Pregunta Repetida de encuesta\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}))\n\t\t\t.then(response => {\n\t\t\t\texpect(response.status).toBe(200);\n\t\t\t\texpect(response.success).toBe(true);\n\t\t\t\texpect(response.data.crearNuevaEtiquetaCorrecciones.etiqueta).toMatch(/Pregunta Repetida de encuesta/);\n\t\t\t\tdone();\n\n\t\t\t});\n\t});\n});"]}