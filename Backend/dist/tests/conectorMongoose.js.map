{"version":3,"sources":["../../tests/conectorMongoose.js"],"names":["connect","clearDatabase","configurarBasedeDatos","logger","getLogger","process","env","NODE_ENV","options","auto_reconnect","reconnectTries","Number","MAX_VALUE","reconnectInterval","Promise","resolve","reject","global","databaseTesting","connection","once","info","on","error","contador","cantidadColeccionesDatabaseTesting","Object","keys","collections","length","i","remove"],"mappings":";;;;;;;;oEAyCO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACAA,SADA;;AAAA;AAAA;AAAA,aAEAC,eAFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeC,qB;;;;;AAzCtB;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIC,SAAS,iBAAOC,SAAP,EAAb;AACAC,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,MAAvB;;AAEA,IAAMC,UAAU;AACfC,iBAAgB,IADD;AAEfC,iBAAgBC,OAAOC,SAFR;AAGfC,oBAAmB;AAHJ,CAAhB;AAKA,IAAIb,UAAU,SAAVA,OAAU,GAAI;AACjB,QAAO,IAAIc,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,qBAASF,OAAT,GAAmBG,OAAOH,OAA1B;AACA,qBAASd,OAAT,CAAiB,mBAASkB,eAA1B,EAA2CV,OAA3C;AACA,qBAASW,UAAT,CACCC,IADD,CACM,MADN,EACa,YAAK;AAChBjB,UAAOkB,IAAP,CAAY,wCAAZ;AACAN;AACA,GAJF,EAIIO,EAJJ,CAIO,OAJP,EAIgB,UAACC,KAAD,EAAU;AACxBpB,UAAOkB,IAAP,CAAY,OAAZ,EAAqBE,KAArB;AACAP;AACA,GAPF;AAQA,EAXM,CAAP;AAYA,CAbD;AAcA,IAAIf,gBAAgB,SAAhBA,aAAgB,GAAI;AACvB,QAAO,IAAIa,OAAJ,CAAY,mBAAW;AAC7B,MAAIU,WAAW,CAAf;AACA,MAAIC,qCAAqCC,OAAOC,IAAP,CAAY,mBAASR,UAAT,CAAoBS,WAAhC,EAA6CC,MAAtF;AACA,OAAK,IAAMC,CAAX,IAAgB,mBAASX,UAAT,CAAoBS,WAApC,EAAgD;AAC/C,sBAAST,UAAT,CAAoBS,WAApB,CAAgCE,CAAhC,EAAmCC,MAAnC,CAA0C,YAAW;AACpDP,eAAUA,WAAW,CAArB;AACA,QAAIA,WAAWC,kCAAf,EAAkD;AACjDV;AACA;AACD,IALD;AAMA;AACD,EAXM,CAAP;AAYA,CAbD","file":"conectorMongoose.js","sourcesContent":["import mongoose from \"mongoose\";\nimport database from \"../config/database.config\";\nimport log4js from \"../log/logger\";\n\nlet logger = log4js.getLogger();\nprocess.env.NODE_ENV = \"test\";\n\nconst options = {\n\tauto_reconnect: true,\n\treconnectTries: Number.MAX_VALUE,\n\treconnectInterval: 1000,\n};\nlet connect = ()=>{\n\treturn new Promise((resolve, reject) => {\n\t\tmongoose.Promise = global.Promise;\n\t\tmongoose.connect(database.databaseTesting, options);\n\t\tmongoose.connection.\n\t\t\tonce(\"open\",()=> {\n\t\t\t\tlogger.info(\"CONNECTION SUCCESFULL DATABASE TESTING\");\n\t\t\t\tresolve();\n\t\t\t}).on(\"error\", (error)=> {\n\t\t\t\tlogger.info(\"ERROR\", error);\n\t\t\t\treject();\n\t\t\t});\n\t});\n};\nlet clearDatabase = ()=>{\n\treturn new Promise(resolve => {\n\t\tlet contador = 0;\n\t\tlet cantidadColeccionesDatabaseTesting = Object.keys(mongoose.connection.collections).length;\n\t\tfor (const i in mongoose.connection.collections){\n\t\t\tmongoose.connection.collections[i].remove(function (){\n\t\t\t\tcontador= contador + 1 ;\n\t\t\t\tif (contador > cantidadColeccionesDatabaseTesting){\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\nexport async function configurarBasedeDatos() {\n\tawait connect();\n\tawait clearDatabase();\n}"]}