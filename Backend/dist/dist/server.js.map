{"version":3,"sources":["../server.js"],"names":["bodyParser","require","graphiqlExpress","graphqlExpress","makeExecutableSchema","logger","getLogger","Promise","global","connect","databaseDevelopment","connection","once","info","on","error","typeDefs","join","__dirname","resolvers","schema","app","use","urlencoded","extended","json","context","models","endpointURL","listen","toUpperCase","SERVER_PORT"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;AAFA,IAAM,aAAa,QAAnB,AAAmB,AAAQ;;eACe,QAAA,AAAQ,A;IAA3C,A,2BAAA,A;I,AAAiB,0BAAA,A;;gBAES,Q,AAAA,AAAQ;I,AAAjC,iC,AAAA;;AACR,IAAI,SAAS,iBAAb,AAAa,AAAO;;AAIpB,mBAAA,AAAS,UAAU,OAAnB,AAA0B;;AAE1B,mBAAA,AAAS,QAAQ,mBAAjB,AAA0B;;AAE1B,mBAAA,AAAS,WAAT,AACC,KADD,AACM,QAAO,YAAK,AAChB;QAAA,AAAO,KAAP,AAAY,AACZ;AAHF,GAAA,AAGI,GAHJ,AAGO,SAAS,UAAA,AAAC,OAAS,AACxB;QAAA,AAAO,KAAP,AAAY,SAAZ,AAAqB,AACrB;AALF;;AAOA,IAAM,WAAU,qCAAW,qCAAW,eAAA,AAAK,KAAL,AAAU,WAAhD,AAAgB,AAAW,AAAW,AAAqB;AAC3D,IAAM,YAAa,yCAAe,qCAAW,eAAA,AAAK,KAAL,AAAU,WAAvD,AAAmB,AAAe,AAAW,AAAqB;;AAElE,IAAM;WAA8B,AAEnC;YAFD,AAAe,AAAqB;AAAA,AACnC,CADc;;AAKf,IAAM,MAAM,cAAZ;;AAEA,IAAA,AAAI,eAAI,AAAW;WAAnB,AAAQ,AAAsB,AACnB;AADmB,AAC7B,CADO;;AAIR,IAAA,AAAI,IAAJ,AAAQ,YAAY,WAApB,AAAoB,AAAW;SAAuB,AAErD;;mBAFD,AAAuC,AAAe,AAE7C;AAAA,AACP;AAHoD,AACrD,CADsC;;AAOvC,IAAA,AAAI,IAAJ,AAAQ,aAAY,gBAAgB,EAAE,aAAtC,AAAoB,AAAgB,AAAe;;AAEnD,IAAA,AAAI,IAAI,sBAAR,AAAQ,AAAO;;AAGf,IAAA,AAAI,OAAJ,AAAW,MAAM,YAAM,AACtB;QAAA,AAAO,KAAP,AAAY,AACZ;QAAA,AAAO,KAAP,AAAY,AACZ;QAAA,AAAO,KAAP,AAAY,AACZ;QAAA,AAAO,yBAAuB,oBAA9B,AAA8B,AAAY,iDAA4C,mBAAtF,AAAiG,cACjG;AALD","file":"server.js","sourcesContent":["import path from \"path\";\nimport express from \"express\";\nimport {environment, serverConf} from \"./config\";\nimport log4js from \"./log/logger\";\nimport morgan from \"morgan\";\nimport mongoose from \"mongoose\";\nimport database from \"./config/database.config\";\nimport models from \"./models\";\nconst bodyParser = require(\"body-parser\");\nconst {graphiqlExpress, graphqlExpress} = require(\"apollo-server-express\");\nimport {fileLoader, mergeTypes, mergeResolvers} from \"merge-graphql-schemas\";\nconst { makeExecutableSchema } = require(\"graphql-tools\");\nlet logger = log4js.getLogger();\n\n\n\nmongoose.Promise = global.Promise;\n\nmongoose.connect(database.databaseDevelopment);\n\nmongoose.connection.\n\tonce(\"open\",()=> {\n\t\tlogger.info(\"CONNECTION SUCCESFULL DATABASE\");\n\t}).on(\"error\", (error)=> {\n\t\tlogger.info(\"ERROR\", error);\n\t});\n\nconst typeDefs =mergeTypes(fileLoader(path.join(__dirname, \"./schemas\")));\nconst resolvers  = mergeResolvers(fileLoader(path.join(__dirname, \"./resolvers\")));\n\nconst schema = makeExecutableSchema({\n\ttypeDefs,\n\tresolvers\n});\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({\n\textended: false\n}));\n\napp.use(\"/graphql\", bodyParser.json(), graphqlExpress({\n\tschema,\n\tcontext:{\n\t\tmodels\n\t}\n}));\n\napp.use(\"/graphiql\",graphiqlExpress({ endpointURL: \"/graphql\" }));\n\napp.use(morgan(\"dev\"));\n\n\napp.listen(5000, () => {\n\tlogger.info(\"###################################\");\n\tlogger.info(\"######## SERVER STARTED !!!! #######\");\n\tlogger.info(\"#####################################\");\n\tlogger.info(`App running on ${environment.toUpperCase()} mode and listening on port ${serverConf.SERVER_PORT} ...`);\n});\n"]}