{"version":3,"sources":["../server.js"],"names":["bodyParser","require","graphiqlExpress","graphqlExpress","makeExecutableSchema","logger","getLogger","Promise","global","connect","databaseDevelopment","connection","once","info","on","error","typeDefs","join","__dirname","resolvers","schema","app","use","urlencoded","extended","json","context","models","endpointURL","listen","toUpperCase","SERVER_PORT"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA,IAAMA,aAAaC,QAAQ,aAAR,CAAnB;;eAC0CA,QAAQ,uBAAR,C;IAAnCC,e,YAAAA,e;IAAiBC,c,YAAAA,c;;gBACSF,QAAQ,eAAR,C;IAAzBG,oB,aAAAA,oB;;AACR,IAAIC,SAAS,iBAAOC,SAAP,EAAb;;AAIA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA,mBAASE,OAAT,CAAiB,mBAASC,mBAA1B;;AAEA,mBAASC,UAAT,CACCC,IADD,CACM,MADN,EACa,YAAK;AAChBP,QAAOQ,IAAP,CAAY,gCAAZ;AACA,CAHF,EAGIC,EAHJ,CAGO,OAHP,EAGgB,UAACC,KAAD,EAAU;AACxBV,QAAOQ,IAAP,CAAY,OAAZ,EAAqBE,KAArB;AACA,CALF;;AAOA,IAAMC,WAAU,qCAAW,qCAAW,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAX,CAAX,CAAhB;AACA,IAAMC,YAAa,yCAAe,qCAAW,eAAKF,IAAL,CAAUC,SAAV,EAAqB,aAArB,CAAX,CAAf,CAAnB;;AAEA,IAAME,SAAShB,qBAAqB;AACnCY,mBADmC;AAEnCG;AAFmC,CAArB,CAAf;;AAKA,IAAME,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQtB,WAAWuB,UAAX,CAAsB;AAC7BC,WAAU;AADmB,CAAtB,CAAR;;AAIAH,IAAIC,GAAJ,CAAQ,UAAR,EAAoBtB,WAAWyB,IAAX,EAApB,EAAuCtB,eAAe;AACrDiB,eADqD;AAErDM,UAAQ;AACPC;AADO;AAF6C,CAAf,CAAvC;;AAQAN,IAAIC,GAAJ,CAAQ,WAAR,EAAoBpB,gBAAgB,EAAE0B,aAAa,UAAf,EAAhB,CAApB;;AAGAP,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAD,IAAIQ,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACtBxB,QAAOQ,IAAP,CAAY,qCAAZ;AACAR,QAAOQ,IAAP,CAAY,sCAAZ;AACAR,QAAOQ,IAAP,CAAY,uCAAZ;AACAR,QAAOQ,IAAP,qBAA8B,oBAAYiB,WAAZ,EAA9B,oCAAsF,mBAAWC,WAAjG;AACA,CALD","file":"server.js","sourcesContent":["import path from \"path\";\nimport express from \"express\";\nimport {environment, serverConf} from \"./config\";\nimport log4js from \"./log/logger\";\nimport morgan from \"morgan\";\nimport mongoose from \"mongoose\";\nimport database from \"./config/database.config\";\nimport models from \"./models\";\nimport {fileLoader, mergeResolvers, mergeTypes} from \"merge-graphql-schemas\";\n\n\nconst bodyParser = require(\"body-parser\");\nconst {graphiqlExpress, graphqlExpress} = require(\"apollo-server-express\");\nconst { makeExecutableSchema } = require(\"graphql-tools\");\nlet logger = log4js.getLogger();\n\n\n\nmongoose.Promise = global.Promise;\n\nmongoose.connect(database.databaseDevelopment);\n\nmongoose.connection.\n\tonce(\"open\",()=> {\n\t\tlogger.info(\"CONNECTION SUCCESFULL DATABASE\");\n\t}).on(\"error\", (error)=> {\n\t\tlogger.info(\"ERROR\", error);\n\t});\n\nconst typeDefs =mergeTypes(fileLoader(path.join(__dirname, \"./schemas\")));\nconst resolvers  = mergeResolvers(fileLoader(path.join(__dirname, \"./resolvers\")));\n\nconst schema = makeExecutableSchema({\n\ttypeDefs,\n\tresolvers\n});\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({\n\textended: false\n}));\n\napp.use(\"/graphql\", bodyParser.json(), graphqlExpress({\n\tschema,\n\tcontext:{\n\t\tmodels\n\t}\n}));\n\n\napp.use(\"/graphiql\",graphiqlExpress({ endpointURL: \"/graphql\" }));\n\n\napp.use(morgan(\"dev\"));\n\n\napp.listen(4000, () => {\n\tlogger.info(\"###################################\");\n\tlogger.info(\"######## SERVER STARTED !!!! #######\");\n\tlogger.info(\"#####################################\");\n\tlogger.info(`App running on ${environment.toUpperCase()} mode and listening on port ${serverConf.SERVER_PORT} ...`);\n});\n"]}