{"version":3,"sources":["../serverTest.js"],"names":["bodyParser","require","graphiqlExpress","graphqlExpress","makeExecutableSchema","logger","getLogger","Promise","global","connect","databaseTesting","connection","once","info","on","error","environment","process","env","NODE_ENV","serverConf","SERVER_PORT","typeDefs","join","__dirname","resolvers","schema","app","use","urlencoded","extended","json","context","models","endpointURL","listen","toUpperCase"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,aAAaC,QAAQ,aAAR,CAAnB;;eAC0CA,QAAQ,uBAAR,C;IAAnCC,e,YAAAA,e;IAAiBC,c,YAAAA,c;;gBACSF,QAAQ,eAAR,C;IAAzBG,oB,aAAAA,oB;;AACR,IAAIC,SAAS,iBAAOC,SAAP,EAAb;;AAEA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA,mBAASE,OAAT,CAAiB,mBAASC,eAA1B;;AAEA,mBAASC,UAAT,CACCC,IADD,CACM,MADN,EACa,YAAK;AAChBP,QAAOQ,IAAP,CAAY,wCAAZ;AACA,CAHF,EAGIC,EAHJ,CAGO,OAHP,EAGgB,UAACC,KAAD,EAAU;AACxBV,QAAOQ,IAAP,CAAY,OAAZ,EAAqBE,KAArB;AACA,CALF;;AASA,IAAIC,cAAeC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,MAA3C;AACA,IAAIC,aAAa;AAChBC,cAAa;AADG,CAAjB;;AAKA,IAAMC,WAAU,qCAAW,qCAAW,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAX,CAAX,CAAhB;AACA,IAAMC,YAAa,yCAAe,qCAAW,eAAKF,IAAL,CAAUC,SAAV,EAAqB,aAArB,CAAX,CAAf,CAAnB;;AAEA,IAAME,SAAStB,qBAAqB;AACnCkB,mBADmC;AAEnCG;AAFmC,CAArB,CAAf;;AAKA,IAAME,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ5B,WAAW6B,UAAX,CAAsB;AAC7BC,WAAU;AADmB,CAAtB,CAAR;;AAIAH,IAAIC,GAAJ,CAAQ,YAAR,EAAsB5B,WAAW+B,IAAX,EAAtB,EAAyC5B,eAAe;AACvDuB,eADuD;AAEvDM,UAAQ;AACPC;AADO;AAF+C,CAAf,CAAzC;;AAOAN,IAAIC,GAAJ,CAAQ,WAAR,EAAoB1B,gBAAgB,EAAEgC,aAAa,YAAf,EAAhB,CAApB;;AAEAP,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAGAD,IAAIQ,MAAJ,CAAW,IAAX,EAAiB,YAAM;AACtB9B,QAAOQ,IAAP,CAAY,qCAAZ;AACAR,QAAOQ,IAAP,CAAY,2CAAZ;AACAR,QAAOQ,IAAP,CAAY,uCAAZ;AACAR,QAAOQ,IAAP,qBAA8BG,YAAYoB,WAAZ,EAA9B,oCAAsFhB,WAAWC,WAAjG;AACA,CALD;;kBAOeM,G","file":"serverTest.js","sourcesContent":["import path from \"path\";\nimport express from \"express\";\nimport log4js from \"./log/logger\";\nimport morgan from \"morgan\";\nimport models from \"./models\";\nimport mongoose from \"mongoose\";\nimport {fileLoader, mergeResolvers, mergeTypes} from \"merge-graphql-schemas\";\nimport database from \"./config/database.config\";\n\nconst bodyParser = require(\"body-parser\");\nconst {graphiqlExpress, graphqlExpress} = require(\"apollo-server-express\");\nconst { makeExecutableSchema } = require(\"graphql-tools\");\nlet logger = log4js.getLogger();\n\nmongoose.Promise = global.Promise;\n\nmongoose.connect(database.databaseTesting);\n\nmongoose.connection.\n\tonce(\"open\",()=> {\n\t\tlogger.info(\"CONNECTION SUCCESFULL DATABASE TESTING\");\n\t}).on(\"error\", (error)=> {\n\t\tlogger.info(\"ERROR\", error);\n\t});\n\n\n\nlet environment =  process.env.NODE_ENV || \"test\";\nlet serverConf = {\n\tSERVER_PORT: 3660\n};\n\n\nconst typeDefs =mergeTypes(fileLoader(path.join(__dirname, \"./schemas\")));\nconst resolvers  = mergeResolvers(fileLoader(path.join(__dirname, \"./resolvers\")));\n\nconst schema = makeExecutableSchema({\n\ttypeDefs,\n\tresolvers\n});\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({\n\textended: false\n}));\n\napp.use(\"/graphtest\", bodyParser.json(), graphqlExpress({\n\tschema,\n\tcontext:{\n\t\tmodels\n\t}\n}));\n\napp.use(\"/graphiql\",graphiqlExpress({ endpointURL: \"/graphtest\" }));\n\napp.use(morgan(\"dev\"));\n\n\napp.listen(3660, () => {\n\tlogger.info(\"###################################\");\n\tlogger.info(\"######## SERVER STARTED TEST !!!! #######\");\n\tlogger.info(\"#####################################\");\n\tlogger.info(`App running on ${environment.toUpperCase()} mode and listening on port ${serverConf.SERVER_PORT} ...`);\n});\n\nexport default app;"]}